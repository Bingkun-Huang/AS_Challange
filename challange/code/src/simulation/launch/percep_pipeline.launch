<launch>
  <!-- Launch a Nodelet Manager to manage nodelets -->
  <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" />
  <!-- Launch another Nodelet Manager specifically for PCL (Point Cloud Library) nodelets -->
  <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />

  <!-- Generate a point cloud from a depth image using the depth_image_proc/point_cloud_xyz nodelet -->
  <node pkg="nodelet" type="nodelet" name="nodelet_point_cloud"
        args="load depth_image_proc/point_cloud_xyz nodelet_manager">
    <!-- Remap the camera_info topic to the RealSense depth camera's camera info -->
    <remap from="camera_info" to="/realsense/depth/camera_info"/>
    <!-- Remap the image_rect topic to the RealSense depth image -->
    <remap from="image_rect" to="/realsense/depth/image"/>
    <!-- Remap the output points topic to /realsense/depth/pointcloud -->
    <remap from="points" to="/realsense/depth/pointcloud"/>
  </node>

  <!-- Run a VoxelGrid filter on the X-axis to clean NaNs and downsample the point cloud data -->
  <node pkg="nodelet" type="nodelet" name="voxel_grid_x" args="load pcl/VoxelGrid pcl_manager" output="screen">
    <!-- Remap the input topic to the point cloud generated by the depth image -->
    <remap from="~input" to="/realsense/depth/pointcloud"/>
    <!-- Set parameters for the VoxelGrid filter -->
    <rosparam>
      filter_field_name: x  <!-- Filter along the X-axis -->
      filter_limit_min: -100  <!-- Minimum X value to keep -->
      filter_limit_max: 100  <!-- Maximum X value to keep -->
      filter_limit_negative: False  <!-- Do not invert the filter -->
      leaf_size: 0.1  <!-- Size of each voxel (downsampling resolution) -->
    </rosparam>
  </node>

  <!-- Run a VoxelGrid filter on the Y-axis to further clean and downsample the point cloud -->
  <node pkg="nodelet" type="nodelet" name="voxel_grid_y" args="load pcl/VoxelGrid pcl_manager" output="screen">
    <!-- Remap the input topic to the output of the X-axis VoxelGrid filter -->
    <remap from="~input" to="/voxel_grid_x/output"/>
    <!-- Set parameters for the VoxelGrid filter -->
    <rosparam>
      filter_field_name: y  <!-- Filter along the Y-axis -->
      filter_limit_min: -100  <!-- Minimum Y value to keep -->
      filter_limit_max: 100  <!-- Maximum Y value to keep -->
      filter_limit_negative: False  <!-- Do not invert the filter -->
      leaf_size: 0.1  <!-- Size of each voxel (downsampling resolution) -->
    </rosparam>
  </node>

  <!-- Run a VoxelGrid filter on the Z-axis to further clean and downsample the point cloud -->
  <node pkg="nodelet" type="nodelet" name="voxel_grid_z" args="load pcl/VoxelGrid pcl_manager" output="screen">
    <!-- Remap the input topic to the output of the Y-axis VoxelGrid filter -->
    <remap from="~input" to="/voxel_grid_y/output"/>
    <!-- Set parameters for the VoxelGrid filter -->
    <rosparam>
      filter_field_name: z  <!-- Filter along the Z-axis -->
      filter_limit_min: -100  <!-- Minimum Z value to keep -->
      filter_limit_max: 100  <!-- Maximum Z value to keep -->
      filter_limit_negative: False  <!-- Do not invert the filter -->
      leaf_size: 0.1  <!-- Size of each voxel (downsampling resolution) -->
    </rosparam>
  </node>

  <!-- Generate an OctoMap from the filtered point cloud using the octomap_server -->
  <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
    <!-- Set the resolution of the OctoMap (in meters) -->
    <param name="resolution" value="1.5" />
    <!-- Set the frame ID for the OctoMap -->
    <param name="frame_id" type="string" value="map" />
    <!-- Set the maximum range for the sensor model (in meters) -->
    <param name="sensor_model/max_range" value="50" />
    <!-- Remap the input point cloud topic to the output of the Z-axis VoxelGrid filter -->
    <remap from="cloud_in" to="/voxel_grid_z/output" />
  </node>
</launch>